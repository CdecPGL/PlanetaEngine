INIResourceの実装<T>
IOKeyConfigをPlanetaEngineのファイルシステムを用いた実装に変更
セーブシステムの実装

※<>内は状況を表す。Iは実装済み、Tはテスト済み、Dは破棄

GameObjectFactoryの実装<D(GlobalObjectFactoryで代用)>
GameObject登録の仕組みを実装<D(GlobalObjectFactoryで代用)>
GameObjectmanagerの修正<I>
GameObjectComponent初期化の仕組みを実装<I>
GUIの削除
2DTransformの実装<I>
2DGameObjectテンプレートの実装<T>
GUITransformの実装
GUIObjectテンプレートの実装
GO,Task,GUIのインターフェイスを整理する<T>
SystemLogを名前空間関数を用いたよりシンプルなものに変更<T(利用を簡単にするマクロを定義することで対応)>
GameObjectBaseのProcessActivate,Inactivate,Disposeの実装<I>
GameObjectのイベントを実装<I>
AttachedTaskの実装<I>
設計変更に伴うCollision関連の修正<I>
設計変更に伴うAnimation関連の修正<D>
設計変更に伴うDrawSystemの修正<I>
設計変更に伴うSceneSetUpperの修正<I>
Delegateクラスのvoid特殊化は不要か検証<I(Callに引数を渡すか渡さないかを分けないといけないので必要)>
GameObjectcomponentのId割り当て、ゲームオブジェクトの参照を渡す方法、セットアップ方法を見直し<I>
CollisionWorldにColliderの有効化、無効化機能を追加。現状ではColliderが有効化無効化されるたびに登録、削除を行っているのでコストがかかっているかもしれない。
TransformSystemの実装<I>
TransformComponentとGroundComponentの更新伝達実装。<I>

初期化終了フローの見直し<T>
FileSystemの改良
ゲームクラスの見直し<T(削除)>
PlanetaEngineクラス、Gameクラスをplaneta_engine直下に<T>
SaveDataManagerの実装
アーカイブマニピュレータの実装
速度優先暗号化器実装
強度優先暗号化器実装
systemファイルアクセサの暗号化
savedataファイルアクセサの暗号化
resourceファイルアクセサの暗号化
開発用、リリース用リソース切り替えの仕組み実装
configmanagerの実装
FileSystemのconstについて見直し
シーン内からのゲームの終了方法の提供<I>
Gameの継承で行っていたゲーム設定方法の手段実装<T>
シーン遷移方法の実装<I>
シーンからシーンマネージャへのアクセス<I>
システムファイルなど起動時にしか読み込まないディレクトリのファイルアクセサは使ったらすぐに破棄してしまってもいいんじゃないか。ただしそのためにはFileManagernの修正が必要。<I>
シーンマネージャのシーン作成を、グローバルオブジェクトファクトリから行うように変更。<T>
リソースのタグを、シーンIDと一対一で対応付け。<T>
リソースマネージャのリソース管理で現在の実装ではタグごとに管理しているため、複数のタグが指定されているリソースの引継ぎ、破棄に問題がある可能性があるかもしれないかも。<I>
DrawManagerの見直し。
リソースのタグを指定しない場合、すべてのシーンでロードされるように変更？
所属地形以外の地形との衝突判定。現状ではこらーだーが所属地形としか衝突しないことを前提とした実装になっているため、修正が必要。
2016/7/18
ゲームオブジェクトコンポーネントのクローン機構実装<I>
ゲームオブジェクトをクローンしたときに、そのコンポーネントが参照するゲームオブジェクトのコンポーネントも更新されるよう、コンポーネントは専用のラッパーを通してゲームオブジェクトのコンポーネントにアクセスするようにする<D(方法が思いつかないので、毎回取得関数を呼ぶようにした)>
ゲームオブジェクトのクローン機構実装<I>
ゲームオブジェクトコンポーネントのロード機構実装<I>
ゲームオブジェクトのロード機構実装<I>
2016/7/22
リフレクションシステムの実装<I>
リフレクションを用いたクローンの実装＜I＞
同Serializeの実装<D(Ptreeからの読み込みで対応)>
上記を用いたGameObjectComponentとGameObjectのクローン実装<I>
同Serialize実装<D>
リフレクションを用いたLuaへのバインド実装<I>
2016/9/4
リフレクションシステムで、特定の型の親クラスを取得することができるようにする
コンポーネントホルダの型によるマップを、リフレクションシステムを用いて初期化を行うように変更
2016/9/7
ColorクラスのPtreeからの読み込み対応<I>
RectAngleクラスのPtreeからの読み込み対応<I>
Reflectableクラス継承が必要な食らす、必要ないクラスの検討<D(Reflectableの軽量化により解決)>
リフレクションシステムの列挙体の登録対応(Ptreeからの読み込みには暫定的に対応できるが、Reflectableをｗ継承しないクラスを対応させる統一された方法を実装すする)
DelegateのHandlerAdderの登録関連の使い勝手がよくない

GameObjectManagerに、Remove中に同じゲームオブジェクトをRemoveした際に無視する機構を実装。これをしないと、地面との衝突イベントハンドラ内で、衝突解除イベント時に自身の破棄を行った際に無限再起呼び出しになるかもしれない。

Effekseerによる表示と、PlaneaEngineによる表示の優先度を混合できるようにする。現状ではEffekseerが必ず上に表示される。Zバッファを用いるといいかもしれない。
Taskのアクティベートに約1フレームの遅延があるので修正。<I>

全体的な設計見直し。スタティッククラスはPlanetaEngineクラスのみにする。<T>
　その他スタティッククラスだったものは、PublicIManager→IManager→ConcreteManagerのようなクラス階層にする。PublicIManagerはエンジン利用者に公開するインターフェイス、IManagerはPlanetaEngine内部で利用するインターフェイス、CncreteManagerは実際の実装を行うクラス。
　利用者はPlanetEngineにIManagerを継承するクラスを登録する。PlanetaEngineはIManagerを通して設定などを行う。PlanetaEngineはPublicIManagerを返す関数を用意し、利用者はそれを用いて各種機能にアクセスする。
　これにより、クラスの取り換えが容易になりテストしやすい、公開したいものだけを利用者に公開できる、設計が容易などの利点ができる。
　これから実装するもの、ほとんど使われていないものから順にこれを適用していき、最終的には全体がこれに従うようにする。
マネージャクラス以外も設計を見直し、シンプルにする。例えば、Sceneとそれが内包する各マネージャについても上と同じような構造を採用する。
　Sceneの上記設計の適用は、各シーンモジュールとGameObjectComponentの依存性をなくしてから行う。