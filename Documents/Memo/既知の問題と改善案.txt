<<解決済>>static_castの誤用によるメモリ破壊が原因だった。
スコープを抜けるときにれーがいが発生。どこかで不正なメモリアクセスが発生している？
発生個所はある程度固定されており、以下の通り。
　~GameObject　終了時
　SceneManager::_transition_proc　起動時
　DrawManager::DrawWire　他のウインドウをアクティブにして、再びアクティブにしたとき
　PlanetaEngine::Updateのif (ProcessMessage() < 0) { return Status::Quit; }　終了時

ファイル読み込みについて
現状ではファイルデータを一度すべて読み込み、そこから各リソースデータへと変換している。これは同じファイルに対してメモリを重複して確保しており、サイズが大きいファイルを読み込む場合は多くのメモリを消費する。
データをすべて読み込んで渡すのではなく、データの読み込みインターフェスを提供して、それを利用しResourceを生成するのはどうか。

ゲームオブジェクト管理について
　現在はシーンが持つゲームオブジェクト管理クラスで線形管理しているが、各ゲームオブジェクトが子オブジェ口の管理者となるツリー方式管理にしてみるのは？
　描画優先度を指定することなく、親子関係で描画順を決められる。また、管理クラスへの登録の手間が省ける。
　
PlanetaEngineクラスはシングルトンにしようと思ったが、保留

ゲームオブジェクトのコンポーネントを取得する時、存在しないコンポーネントが要求されたら取得関数内でエラーを発するのはどうか。わざわざ取得要求もとでエラーの記述をしなくても済むようになる。

トランスフォームと表示に関する整合性
現状では
トランスフォームを参考に重力方向に画像回転
トランスフォーム更新
トランスフォームを参考に表示
なため、トランスフォーム更新後の位置に適切な回転が適用されていないものが表示され、回転にの変化が大きいほど相違が生じる
速度についても同様に、
トランスフォーム更新(速度適用)
衝突判定(速度調整)
となるため、衝突判定により調整される前の速度が適用されてしまう。

画面(UI)座標とゲームオブジェクト空間座標の変換関数はどこに置くべきか。今のところはとりあえずplaneta_engine::utility名前空間、CameraUtilityファイルにおいている。

現在、衝突判定イベントの実装にはstd::funstionを用いているが、そのうちWeakPointerDelegateに置き換える予定。後者の場合、WeakPointerの示す先が無効になった場合も考慮されていて安全。
ただ、std::functionについて、それが示す関数を持つオブジェクト

GameProcessはできるだけ簡単に扱えるようにしたいが、現状ではコンストラクタを使った設定は使えないためマネージャを通してインスタンスを作成し、各種設定関数で設定する必要がある。もっと簡単に作成できるような方法はないか。

コンポーネントを個別に有効化無効化する機能が欲しい。


衝突判定において判定処理と、反映処理を分離することで、判定処理は読み出し操作のみになるためマルチスレッド化が用意になるかもしれない。

リソースのタグ管理について、各シーンがラベルを指定するのではなく、シーン毎にリソースを関連付けるようにする。そうすれば、シーン定義に仕様タグを含める必要はなくて楽。


フォントリソースとフォント設定を分離。使用場所によってサイズなどを変えられるように
"自作ライブラリ"への依存をなくす
コメントをXMLドキュメントコメントに統一
tag_listの指定方法を柔軟に。ワイルドカードやフォルダ指定を可能にするなど
