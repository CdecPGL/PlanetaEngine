#include "CDraw2D.h"
#include "IGameObjectAccessor.h"
//#include "GameObjectDrawComponentProcessRegistrator.h"
#include "GameObjectDrawProcessCore.h"
#include "CTransform2D.h"
#include "Matrix2_2.h"
#include "SystemLog.h"
#include "SceneAccessorForGameObject.h"
#include "SceneDataForGameObject.h"

namespace planeta_engine {
	CDraw2D::CDraw2D() :draw_priority_(0), rotation_rad_(0.0), scale_(1.0, 1.0) {

	}

	CDraw2D& CDraw2D::draw_priority(int priority) {
		draw_priority_ = priority;
		//ゲームオブジェクトがアクティブなら優先度更新
		UpdatePriority_();
		return *this;
	}

	Vector2Dd CDraw2D::GetDrawCenterPosition() const {
		const CTransform2D& transform = game_object().transform();
		Vector2Dd relation_position = math::RotationalTransformation(transform.global_rotation_rad(), position_); //ゲームオブジェクトからの相対位置
		relation_position.x *= transform.scale().x; //横方向拡大を反映
		relation_position.y *= transform.scale().y; //縦方向拡大を反映
		return transform.global_position() + relation_position;
	}

	double CDraw2D::GetDrawRotationRed() const {
		return game_object().transform().global_rotation_rad() + rotation_rad_;
	}

	Vector2Dd CDraw2D::GetDrawScale() const {
		return Vector2Dd(game_object().transform().scale().x * scale_.x, game_object().transform().scale().y * scale_.y);
	}

	void CDraw2D::RegisterToProcess_() {
		if (draw_component_registrator_) {
			draw_component_registrator_->Register(std::static_pointer_cast<CDraw2D>(this_shared()), draw_priority_);
		} else {
			debug::SystemLog::instance().LogWarning("ゲームオブジェクト描画プロセスが取得できていません。", "DrawComponent::_ResistToDrawProcess");
		}
	}

	void CDraw2D::RemoveFromProcess_() {
		if (draw_component_registrator_) {
			draw_component_registrator_->Remove(std::static_pointer_cast<CDraw2D>(this_shared()));
		} else {
			debug::SystemLog::instance().LogWarning("ゲームオブジェクト描画プロセスが取得できていません。", "DrawComponent::_RemoveFromDrawProcess");
		}
	}

	void CDraw2D::UpdatePriority_() {
		if (is_active()) {
			draw_component_registrator_->ChangePriority(std::static_pointer_cast<CDraw2D>(this_shared()), draw_priority_);
		}
	}

	bool CDraw2D::OnActivated() {
		RegisterToProcess_();
		return true;
	}

	bool CDraw2D::OnInactivated() {
		RemoveFromProcess_();
		return true;
	}

	bool CDraw2D::SpecialSetUp(const core::SceneDataForGameObject& setup_data) {
		//			draw_component_registrator_ = setup_data.draw_component_process_registrator;
		draw_component_registrator_ = setup_data.draw_component_process_registrator;
		return true;
	}
}